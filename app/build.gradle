apply plugin: 'com.android.application'
apply plugin: 'ServiceLoader'
apply plugin: 'kotlin-android'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    defaultConfig {
        applicationId "com.mbg.mbgsupport"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 100
        versionName '1.0.0'
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        multiDexEnabled true

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }


    kotlinOptions {
        jvmTarget = "1.8"
    }

    buildFeatures {
        viewBinding = true
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'com.google.android.material:material:1.3.0'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation 'com.github.canwen2003:module_interfaces:v1.0.0.0'
    implementation 'com.github.canwen2003:module_serviceloader:v1.0.0.0'
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    annotationProcessor 'com.github.canwen2003:module_compiler:v1.0.0.0'
    implementation 'androidx.viewpager2:viewpager2:1.1.0-alpha01'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    //lottie动画
    implementation 'com.airbnb.android:lottie:3.5.0'
    implementation 'com.scwang.smart:refresh-layout-kernel:2.0.1'      //核心必须依赖
    implementation 'com.scwang.smart:refresh-header-classics:2.0.1'    //经典刷新头

    implementation "androidx.datastore:datastore:1.0.0-rc01"

    def versions = "2.5.0"
    implementation "androidx.work:work-runtime:$versions"

    //Room数据库
    implementation "androidx.room:room-runtime:2.3.0"
    annotationProcessor "androidx.room:room-compiler:2.3.0"

    implementation 'com.google.android:flexbox:1.1.1'

    //android-startup提供一种在应用启动时能够更加简单、高效的方式来初始化组件。开发人员可以使用android-startup来简化启动序列，并显式地设置初始化顺序与组件之间的依赖关系。 与此同时android-startup支持同步与异步等待，并通过有向无环图拓扑排序的方式来保证内部依赖组件的初始化顺序。
    implementation 'com.rousetime.android:android-startup:1.0.6'


    debugImplementation "io.github.didi.dokit:dokitx:3.4.0-alpha03"


    implementation project(path: ':common')
    implementation project(path: ':coreui')
}
